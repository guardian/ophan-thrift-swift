/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import Foundation

import Thrift


public func ==(lhs: Url, rhs: Url) -> Bool {
  return
    (lhs.raw == rhs.raw) &&
    (lhs.host == rhs.host) &&
    (lhs.domain == rhs.domain) &&
    (lhs.path == rhs.path) &&
    (lhs.site == rhs.site) &&
    (lhs.synthesised == rhs.synthesised)
}

extension Url : CustomStringConvertible {

  public var description : String {
    var desc = "Url("
    desc += "raw=\(String(describing: self.raw)), "
    desc += "host=\(String(describing: self.host)), "
    desc += "domain=\(String(describing: self.domain)), "
    desc += "path=\(String(describing: self.path)), "
    desc += "site=\(String(describing: self.site)), "
    desc += "synthesised=\(String(describing: self.synthesised))"
    return desc
  }

}

extension Url : Hashable {

  public func hash(into hasher: inout Hasher) {
    hasher.combine(raw)
    hasher.combine(host)
    hasher.combine(domain)
    hasher.combine(path)
    hasher.combine(site)
    hasher.combine(synthesised)
  }

}

extension Url : TStruct {

  public static var fieldIds: [String: Int32] {
    return ["raw": 1, "host": 2, "domain": 6, "path": 3, "site": 5, "synthesised": 11, ]
  }

  public static var structName: String { return "Url" }

  public static func read(from proto: TProtocol) throws -> Url {
    _ = try proto.readStructBegin()
    var raw: String!
    var host: String!
    var domain: String!
    var path: String!
    var site: SignificantSite?
    var synthesised: Bool?

    fields: while true {

      let (_, fieldType, fieldID) = try proto.readFieldBegin()

      switch (fieldID, fieldType) {
        case (_, .stop):            break fields
        case (1, .string):           raw = try String.read(from: proto)
        case (2, .string):           host = try String.read(from: proto)
        case (6, .string):           domain = try String.read(from: proto)
        case (3, .string):           path = try String.read(from: proto)
        case (5, .i32):             site = try SignificantSite.read(from: proto)
        case (11, .bool):            synthesised = try Bool.read(from: proto)
        case let (_, unknownType):  try proto.skip(type: unknownType)
      }

      try proto.readFieldEnd()
    }

    try proto.readStructEnd()
    // Required fields
    try proto.validateValue(raw, named: "raw")
    try proto.validateValue(host, named: "host")
    try proto.validateValue(domain, named: "domain")
    try proto.validateValue(path, named: "path")

    return Url(raw: raw, host: host, domain: domain, path: path, site: site, synthesised: synthesised)
  }

}



