/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import Foundation

import Thrift


public func ==(lhs: Interaction, rhs: Interaction) -> Bool {
  return
    (lhs.component == rhs.component) &&
    (lhs.value == rhs.value) &&
    (lhs.atomId == rhs.atomId)
}

extension Interaction : CustomStringConvertible {

  public var description : String {
    var desc = "Interaction("
    desc += "component=\(String(describing: self.component)), "
    desc += "value=\(String(describing: self.value)), "
    desc += "atomId=\(String(describing: self.atomId))"
    return desc
  }

}

extension Interaction : Hashable {

  public func hash(into hasher: inout Hasher) {
    hasher.combine(component)
    hasher.combine(value)
    hasher.combine(atomId)
  }

}

extension Interaction : TStruct {

  public static var fieldIds: [String: Int32] {
    return ["component": 1, "value": 2, "atomId": 3, ]
  }

  public static var structName: String { return "Interaction" }

  public static func read(from proto: TProtocol) throws -> Interaction {
    _ = try proto.readStructBegin()
    var component: String!
    var value: String?
    var atomId: String?

    fields: while true {

      let (_, fieldType, fieldID) = try proto.readFieldBegin()

      switch (fieldID, fieldType) {
        case (_, .stop):            break fields
        case (1, .string):           component = try String.read(from: proto)
        case (2, .string):           value = try String.read(from: proto)
        case (3, .string):           atomId = try String.read(from: proto)
        case let (_, unknownType):  try proto.skip(type: unknownType)
      }

      try proto.readFieldEnd()
    }

    try proto.readStructEnd()
    // Required fields
    try proto.validateValue(component, named: "component")

    return Interaction(component: component, value: value, atomId: atomId)
  }

}



