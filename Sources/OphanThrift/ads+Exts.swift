/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import Foundation

import Thrift


public func ==(lhs: RenderedAd, rhs: RenderedAd) -> Bool {
  return
    (lhs.slot == rhs.slot) &&
    (lhs.lineItemId == rhs.lineItemId) &&
    (lhs.creativeId == rhs.creativeId) &&
    (lhs.timeToRenderEndedMs == rhs.timeToRenderEndedMs) &&
    (lhs.timeToAdRequestMs == rhs.timeToAdRequestMs) &&
    (lhs.adRetrievalTimeMs == rhs.adRetrievalTimeMs) &&
    (lhs.adRenderTimeMs == rhs.adRenderTimeMs)
}

extension RenderedAd : CustomStringConvertible {

  public var description : String {
    var desc = "RenderedAd("
    desc += "slot=\(String(describing: self.slot)), "
    desc += "lineItemId=\(String(describing: self.lineItemId)), "
    desc += "creativeId=\(String(describing: self.creativeId)), "
    desc += "timeToRenderEndedMs=\(String(describing: self.timeToRenderEndedMs)), "
    desc += "timeToAdRequestMs=\(String(describing: self.timeToAdRequestMs)), "
    desc += "adRetrievalTimeMs=\(String(describing: self.adRetrievalTimeMs)), "
    desc += "adRenderTimeMs=\(String(describing: self.adRenderTimeMs))"
    return desc
  }

}

extension RenderedAd : Hashable {

  public func hash(into hasher: inout Hasher) {
    hasher.combine(slot)
    hasher.combine(lineItemId)
    hasher.combine(creativeId)
    hasher.combine(timeToRenderEndedMs)
    hasher.combine(timeToAdRequestMs)
    hasher.combine(adRetrievalTimeMs)
    hasher.combine(adRenderTimeMs)
  }

}

extension RenderedAd : TStruct {

  public static var fieldIds: [String: Int32] {
    return ["slot": 1, "lineItemId": 2, "creativeId": 3, "timeToRenderEndedMs": 4, "timeToAdRequestMs": 5, "adRetrievalTimeMs": 6, "adRenderTimeMs": 7, ]
  }

  public static var structName: String { return "RenderedAd" }

  public static func read(from proto: TProtocol) throws -> RenderedAd {
    _ = try proto.readStructBegin()
    var slot: String!
    var lineItemId: Int64?
    var creativeId: Int64?
    var timeToRenderEndedMs: Int64?
    var timeToAdRequestMs: Int64?
    var adRetrievalTimeMs: Int64?
    var adRenderTimeMs: Int64?

    fields: while true {

      let (_, fieldType, fieldID) = try proto.readFieldBegin()

      switch (fieldID, fieldType) {
        case (_, .stop):            break fields
        case (1, .string):           slot = try String.read(from: proto)
        case (2, .i64):             lineItemId = try Int64.read(from: proto)
        case (3, .i64):             creativeId = try Int64.read(from: proto)
        case (4, .i64):             timeToRenderEndedMs = try Int64.read(from: proto)
        case (5, .i64):             timeToAdRequestMs = try Int64.read(from: proto)
        case (6, .i64):             adRetrievalTimeMs = try Int64.read(from: proto)
        case (7, .i64):             adRenderTimeMs = try Int64.read(from: proto)
        case let (_, unknownType):  try proto.skip(type: unknownType)
      }

      try proto.readFieldEnd()
    }

    try proto.readStructEnd()
    // Required fields
    try proto.validateValue(slot, named: "slot")

    return RenderedAd(slot: slot, lineItemId: lineItemId, creativeId: creativeId, timeToRenderEndedMs: timeToRenderEndedMs, timeToAdRequestMs: timeToAdRequestMs, adRetrievalTimeMs: adRetrievalTimeMs, adRenderTimeMs: adRenderTimeMs)
  }

}



