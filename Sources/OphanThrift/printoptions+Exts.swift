/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import Foundation

import Thrift


public func ==(lhs: PrintOptions, rhs: PrintOptions) -> Bool {
  return
    (lhs.product == rhs.product) &&
    (lhs.deliveryCountryCode == rhs.deliveryCountryCode)
}

extension PrintOptions : CustomStringConvertible {

  public var description : String {
    var desc = "PrintOptions("
    desc += "product=\(String(describing: self.product)), "
    desc += "deliveryCountryCode=\(String(describing: self.deliveryCountryCode))"
    return desc
  }

}

extension PrintOptions : Hashable {

  public func hash(into hasher: inout Hasher) {
    hasher.combine(product)
    hasher.combine(deliveryCountryCode)
  }

}

extension PrintOptions : TStruct {

  public static var fieldIds: [String: Int32] {
    return ["product": 1, "deliveryCountryCode": 2, ]
  }

  public static var structName: String { return "PrintOptions" }

  public static func read(from proto: TProtocol) throws -> PrintOptions {
    _ = try proto.readStructBegin()
    var product: PrintProduct!
    var deliveryCountryCode: String!

    fields: while true {

      let (_, fieldType, fieldID) = try proto.readFieldBegin()

      switch (fieldID, fieldType) {
        case (_, .stop):            break fields
        case (1, .i32):             product = try PrintProduct.read(from: proto)
        case (2, .string):           deliveryCountryCode = try String.read(from: proto)
        case let (_, unknownType):  try proto.skip(type: unknownType)
      }

      try proto.readFieldEnd()
    }

    try proto.readStructEnd()
    // Required fields
    try proto.validateValue(product, named: "product")
    try proto.validateValue(deliveryCountryCode, named: "deliveryCountryCode")

    return PrintOptions(product: product, deliveryCountryCode: deliveryCountryCode)
  }

}



